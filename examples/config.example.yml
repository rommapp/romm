# This is a generic example of a configuration file
# Rename this file to `config.yml`, copy it to a `config` folder, and mount that folder as per the docker-compose.example.yml
# Only uncomment the lines you want to use/modify, or add new ones where needed

exclude:
  # Exclude platforms to be scanned
  platforms: [] # ['my_excluded_platform_1', 'my_excluded_platform_2']

  # Exclude roms or parts of roms to be scanned
  roms:
    # Single file games section.
    # Will not apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
    single_file:
      # Exclude all files with certain extensions to be scanned
      extensions: [] # ['xml', 'txt']

      # Exclude matched file names to be scanned.
      # Supports unix filename pattern matching
      # Can also exclude files by extension
      names: [] # ['info.txt', '._*', '*.nfo']

    # Multi files games section
    # Will apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
    multi_file:
      # Exclude matched 'folder' names to be scanned (RomM identifies folders as multi file games)
      names: [] # ['my_multi_file_game', 'DLC']

      # Exclude files within sub-folders.
      parts:
        # Exclude matched file names to be scanned from multi file roms
        # Keep in mind that RomM doesn't scan folders inside multi files games,
        # so there is no need to exclude folders from inside of multi files games.
        names: [] # ['data.xml', '._*'] # Supports unix filename pattern matching

        # Exclude all files with certain extensions to be scanned from multi file roms
        extensions: [] # ['xml', 'txt']

system:
  # Asociate different platform names to your current file system platform names
  # [your custom platform folder name]: [RomM platform name]
  # In this example if you have a 'gc' folder, RomM will treat it like the 'ngc' folder and if you have a 'psx' folder, RomM will treat it like the 'ps' folder
  platforms: {} # { gc: 'ngc', psx: 'ps' }

  # Asociate one platform to it's main version
  versions: {} # { naomi: 'arcade' }

# The folder name where your roms are located
filesystem: {} # { roms_folder: 'roms' } For example if your folder structure is /home/user/library/roms_folder

# Metadata priority during scans
# Below are the default priority values used
# scan:
#   priority:
#     metadata: # Top-level metadata source priority
#       - "igdb" # IGDB
#       - "moby" # MobyGames
#       - "ss" # Screenscraper
#       - "ra" # RetroAchievements
#       - "lb" # Launchbox
#       - "hasheous" # Hasheous
#       - "flashpoint" # Flashpoint Project
#       - "hltb" # HowLongToBeat
#     artwork: # Cover art and screenshots
#       - "igdb" # IGDB
#       - "moby" # MobyGames
#       - "ss" # Screenscraper
#       - "ra" # RetroAchievements
#       - "lb" # Launchbox
#       - "hasheous" # Hasheous
#       - "flashpoint" # Flashpoint Project
#       - "hltb" # HowLongToBeat
#     region: # Cover art and game title (only used by Screenscraper)
#       - "us"
#       - "wor"
#       - "ss"
#       - "eu"
#       - "jp"
#     language: # Cover art and game title (only used by Screenscraper)
#       - "en"
#       - "fr"

# EmulatorJS per-core options
# emulatorjs:
#   debug: true # Available options will be logged to the browser console
#   cache_limit: null # Cache limit per ROM (in bytes)
#   settings:
#     parallel_n64: # Use the exact core name
#       vsync: disable
#     snes9x:
#       snes9x_region: ntsc
#     default: # These settings apply to all cores
#       fps: show
#   controls: # https://emulatorjs.org/docs4devs/control-mapping/
#     snes9x:
#       0: # Player 1
#         0: # A MAPPING FOR EACH BUTTON MUST BE SET!
#           value: x # Mapping for keyboard
#           value2: BUTTON_2 # Mapping for connected controller
#       1: # Player 2
#       2: # Player 3
#       3: # Player 4
