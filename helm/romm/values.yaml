global:
  # -- Labels to apply to all resources.
  commonLabels: {}
  # -- Reference to one or more secrets to be used when pulling images
  #    (https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
  imagePullSecrets: []

# -- String to partially override `common.names.fullname` template (will maintain the release name)
nameOverride: ""
# -- String to fully override `common.names.fullname` template
fullnameOverride: ""

image:
  # -- referencing the docker image to use for the deployment
  repository: zurdi15/romm
  # -- pull policy, if you set tag to latest, this should be set to Always to not end up with stale builds
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  #    If not set and create is true, a name is generated using the fullname template
  name: ""

# -- If needed, set some annotations to the deployed pods
podAnnotations: {}

podSecurityContext:
  # -- set filesystem group access to the same as runAsGroup
  fsGroup: 1000
  # -- ensure the container dosnt run with not-needed root permissions
  runAsNonRoot: true
  # -- run the deployment as a user with this UID
  runAsUser: 1000
  # -- run the deployment as a group with this GID, should match fsGroup above
  runAsGroup: 1000
  # -- change fs mount permissions if they are not matching desired fsGroup
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault

securityContext:
  # -- drop unneccessary permissions
  capabilities:
    drop:
    - ALL
  # -- mount / as readonly, writeable directorys are explicitely mounted
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

service:
  type: ClusterIP

ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 256m
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# -- Enable and configure redis subchart under this key.
#    If enabled, the app's redis envs will be set for you.
#    [[ref]](https://github.com/bitnami/charts/tree/main/bitnami/redis)
# @default -- See [values.yaml](./values.yaml)
redis:
  # -- provision an instance of the redis sub-chart
  enabled: true
  # Redis specific helm chart settings, please see:
  # https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
  redisPort: 6379
  architecture: standalone
  auth:
    enabled: true
    password: "changeme"

# -- Enable and configure mariadb database subchart under this key.
#    If enabled, the app's db envs will be set for you.
#    [[ref]](https://github.com/bitnami/charts/tree/main/bitnami/mariadb)
# @default -- See [values.yaml](./values.yaml)
# TODO: currently bitnami has a bug where redis and mariadb can not be
#       enabled at the same time (https://github.com/bitnami/charts/issues/20504)
mariadb:
  # -- provision an instance of the mariadb sub-chart
  enabled: false
  auth:
    database: romm
    username: romm
    password: changeme
    rootPassword: changeme
  primary:
    persistence:
      enabled: false
      # storageClass: ""
      # size: 8Gi

persistence:
  resources:
    # -- Enable roms metadata (covers) persistence using `PVC`. If false, use emptyDir
    enabled: true
    # -- Claims that pods are allowed to reference (see
    #    https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#persistentvolumeclaim-v1-core
    #    for structural reference)
    volumeClaimSpec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
  database:
    # -- Enable roms database persistence using `PVC`. only needed when database backend is sqlite
    enabled: true
    # -- Claims that pods are allowed to reference (see
    #    https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#persistentvolumeclaim-v1-core
    #    for structural reference)
    volumeClaimSpec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
  logs:
    # -- Enable logs persistence using `PVC`. If false, use emptyDir
    enabled: false
    # -- Claims that pods are allowed to reference (see
    #    https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#persistentvolumeclaim-v1-core
    #    for structural reference)
    volumeClaimSpec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 256Mi

romm:
  config:
    auth:
      # -- enable romm's integrated authentication mechanics (this requires redis to be available)
      enabled: false
      # -- default username for the admin user
      username: admin
      # -- default password for the admin user
      password: admin
    filesystem_watcher:
      # -- enable inotify filesystem watcher mechanics to automatically add new roms and pick up changes as they happen
      enabled: true
      scan_delay: 5
    scheduled_tasks:
      filesystem_scan:
        enabled: true
        # -- Cron expression for the scheduled scan (default: 0 3 * * * - At 3:00 AM every day)
        cron: 0 3 * * *
      switch_titledb_update:
        enabled: true
        # -- Cron expression to update switch titledb (default: 0 4 * * * - At 4:00 AM every day)
        cron: 0 4 * * *
      mame_xml_update:
        enabled: true
        # -- Cron expression to update mame xml database (default: 0 5 * * * - At 5:00 AM every day)
        cron: 0 5 * * *
    database: 
      # -- type can either be mariadb or sqlite
      type: sqlite
      # -- only needed when you are using an external shared mariadb
      #    that is already existing and not the romm integrated one
      mariadb:
        host: localhost 
        port: 3306
        schema: romm
        user: romm-user
        pass: password
    igdb_api:
      client_id: CHANGEME_IGDB_CLIENT_ID
      client_secret: CHANGEME_IGDB_CLIENT_SECRET
    steamgriddb_api:
      api_key: CHANGEME_STEAMGRIDDB_API_KEY
  settings:
    exclude:
      # -- Exclude platforms to be scanned
      platforms:
        - 'romm'

      # -- Exclude roms or parts of roms to be scanned
      roms:
        # -- Single file games section
        single_file:
          # -- Exclude matched file names to be scanned
          names:
            - 'info.txt'
          # -- Exclude all files with certain extensions to be scanned
          extensions:
            - 'xml'

        # -- Multi files games section
        multi_file:
          # -- Exclude matched 'folder' (RomM identifies folders as multi file games) names to be scanned
          names:
            - 'my_multi_file_game'
            - 'DLC'
          parts:
            # -- Exclude matched file names to be scanned from multi file roms
            #    Keep in mind that RomM doesn't scan folders inside multi files games,
            #    so there is no need to exclude folders from inside of multi files games.
            names:
              - 'data.xml'
            # -- Exclude all files with certain extensions to be scanned from multi file roms
            extensions:
              - 'txt'

    # Asociate different platform names to your current file system platform names
    system:
      platforms:
        # -- [your custom platform folder name]: [RomM platform name]
        gc: 'ngc' # -- In this example if you have a 'gc' folder, RomM will treat it like the 'ngc' folder
        psx: 'ps' # -- In this example if you have a 'psx' folder, RomM will treat it like the 'ps' folder

  # -- The list of volumes that will be mounted inside romm pod, to `/romm/library`.
  mediaVolumes: []
  # - name: library # this volume will be mounted into `/romm/library`
  #   readOnly: false # is this volume readonly ? (optional, default true)
  #   volumeSpec: # see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#persistentvolumespec-v1-core
  #     accessModes:
  #       - ReadWriteOnce
  #     capacity:
  #       storage: 8Ti
  #     nfs:
  #       path: /nas/games
  #       server: my-nfs-server.example.com